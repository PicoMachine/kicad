/*
 * This program source code file is part of KiCad, a free EDA CAD application.
 *
 * Copyright (C) 2016 CERN
 * @author Tomasz Wlostowski <tomasz.wlostowski@cern.ch>
 * @author Maciej Suminski <maciej.suminski@cern.ch>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, you may find one here:
 * https://www.gnu.org/licenses/gpl-3.0.html
 * or you may search the http://www.gnu.org website for the version 3 license,
 * or you may write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

#ifndef __sim_plot_frame__
#define __sim_plot_frame__

/**
@file Subclass of SIM_PLOT_FRAME_BASE, which is generated by wxFormBuilder. */

#include "sim_plot_frame_base.h"
#include "sim_types.h"

#include <kiway_player.h>
#include <dialogs/dialog_sim_settings.h>

#include <wx/event.h>

#include <list>
#include <memory>
#include <map>

class SCH_EDIT_FRAME;
class SCH_COMPONENT;

class SPICE_SIMULATOR;
class NETLIST_EXPORTER_PSPICE_SIM;
class SIM_PLOT_PANEL;
class TUNER_SLIDER;

/** Implementing SIM_PLOT_FRAME_BASE */
class SIM_PLOT_FRAME : public SIM_PLOT_FRAME_BASE
{
    public:
        /** Constructor */
        SIM_PLOT_FRAME( KIWAY* aKiway, wxWindow* aParent );
        ~SIM_PLOT_FRAME();

        void StartSimulation();
        void StopSimulation();
        bool IsSimulationRunning();

        /**
         * @brief Creates a new plot panel for a given simulation type and adds it to the main
         * notebook.
         * @param aSimType is requested simulation type.
         * @return The new plot panel.
         */
        SIM_PLOT_PANEL* NewPlotPanel( SIM_TYPE aSimType );

        void AddVoltagePlot( const wxString& aNetName );

        void AddTuner( SCH_COMPONENT* aComponent );

        void RemoveTuner( TUNER_SLIDER* aTuner );

        SIM_PLOT_PANEL* CurrentPlot() const;

    private:
        void updateNetlistExporter();

        /**
         * @brief Updates plot in a particular SIM_PLOT_PANEL. If the panel does not contain
         * the plot, it will be added.
         * @param aSpiceName is the plot name in the format accepted by the current simulator instance
         * (for NGSPICE it is e.g. "V(1)").
         * @param aName is the name used in the legend.
         * @param aPanel is the panel that should receive the update.
         * @return True if a plot was successfully added/updated.
         */
        bool updatePlot( const wxString& aSpiceName, const wxString& aName, SIM_PLOT_PANEL* aPanel );

        /**
         * @brief Updates the list of currently plotted signals.
         */
        void updateSignalList();

        /**
         * @brief Fills the tuners area with the ones related to the current plot.
         */
        void updateTuners();

        /**
         * @brief Returns node number for a given net.
         * @param aNetName is the net number.
         * @return Corresponding net number or -1 if there is no such net.
         */
        int getNodeNumber( const wxString& aNetName );

        // Menu handlers
        void menuNewPlot( wxCommandEvent& aEvent ) override;

        void menuExit( wxCommandEvent& event ) override
        {
            Close();
        }

        void menuSaveImage( wxCommandEvent& event ) override;
        void menuSaveCsv( wxCommandEvent& event ) override;
        void menuZoomIn( wxCommandEvent& event ) override;
        void menuZoomOut( wxCommandEvent& event ) override;
        void menuZoomFit( wxCommandEvent& event ) override;
        void menuShowGrid( wxCommandEvent& event ) override;
        void menuShowGridUpdate( wxUpdateUIEvent& event ) override;
        void menuShowLegend( wxCommandEvent& event ) override;
        void menuShowLegendUpdate( wxUpdateUIEvent& event ) override;
        void menuShowCoords( wxCommandEvent& event ) override;
        void menuShowCoordsUpdate( wxUpdateUIEvent& event ) override;

        // Event handlers
        void onPlotChanged( wxNotebookEvent& event ) override;

        void onSignalDblClick( wxCommandEvent& event ) override;
        void onSignalRClick( wxMouseEvent& event ) override;

        void onSimulate( wxCommandEvent& event ) override;
        void onSettings( wxCommandEvent& event ) override;
        void onAddSignal( wxCommandEvent& event ) override;
        void onProbe( wxCommandEvent& event ) override;
        void onTune( wxCommandEvent& event ) override;

        void onClose( wxCloseEvent& aEvent );

        void onCursorUpdate( wxCommandEvent& aEvent );
        void onSimUpdate( wxCommandEvent& aEvent );
        void onSimReport( wxCommandEvent& aEvent );
        void onSimStarted( wxCommandEvent& aEvent );
        void onSimFinished( wxCommandEvent& aEvent );

        SCH_EDIT_FRAME* m_schematicFrame;
        std::unique_ptr<NETLIST_EXPORTER_PSPICE_SIM> m_exporter;
        std::unique_ptr<SPICE_SIMULATOR> m_simulator;
        std::map<SIM_PLOT_PANEL*, std::list<TUNER_SLIDER*> > m_tuners;

        // Trick to preserve settings between runs
        DIALOG_SIM_SETTINGS m_settingsDlg;

        // Right click context menu for signals in the listbox
        class SIGNAL_CONTEXT_MENU : public wxMenu
        {
            public:
                SIGNAL_CONTEXT_MENU( const wxString& aSignal, SIM_PLOT_FRAME* aPlotFrame );

            private:
                void onMenuEvent( wxMenuEvent& aEvent );

                const wxString& m_signal;
                SIM_PLOT_FRAME* m_plotFrame;

                enum SIGNAL_CONTEXT_MENU_EVENTS
                {
                    SHOW_SIGNAL,
                    HIDE_SIGNAL,
                    SHOW_CURSOR,
                    HIDE_CURSOR
                };
        };
};

// Commands
wxDECLARE_EVENT( EVT_SIM_UPDATE, wxCommandEvent );
wxDECLARE_EVENT( EVT_SIM_REPORT, wxCommandEvent );

// Notifications
wxDECLARE_EVENT( EVT_SIM_STARTED, wxCommandEvent );
wxDECLARE_EVENT( EVT_SIM_FINISHED, wxCommandEvent );

#endif // __sim_plot_frame__
